package calypso

import calypso.*;
import robocode.*;
import robocode.ScannedRobotEvent;

query "consulta_acciones"
  accion: Accion()
end

// REGRAS:

// Declaração de uma vítima quando encontrada e de seus valores a serem utilizados pelas regras
declare Victima
   nombre: String
   x: double
   y: double
   distancia: double
end

// Regra utilizada para eliminar execução de ações de mesmo tipo com prioridade menor
rule "depurar acciones del mismo tipo"
when
	$accion1: Accion($tipo: tipo, $prioridad1: prioridad)
	$accion2: Accion(tipo==$tipo, $prioridad2: prioridad)
	eval ($prioridad1 > $prioridad2)
then
    retract($accion2);
    System.out.println("regla 1");
end

// Essa regra faz com que o radar fique girando para a direita até que um inimigo seja escaneado
rule "sin robots a la vista -> giro completo del radar"
when
	not (exists ScannedRobotEvent())
then
	insert (new Accion(Accion.GIRAR_RADAR_DER, 360, 1));
	System.out.println("regla 2");
end

// Essa regra complementa a primeira e a substitui, além de girar o radar, o agente avança para tentar chegar em uma posição do campo de batalha onde haja agentes inimigos
rule "parado sin victima -> moverse al azar (girar+avanzar)"
when
  EstadoRobot( distanceRemaining == 0 )
  not (exists Victima())
  $batalla: EstadoBatalla()
then
  insert(new Accion(Accion.GIRAR_RADAR_DER, 360, 1));
  insert(new Accion(Accion.GIRAR_TANQUE_DER, (360*Math.random() - 180), 1));
  insert(new Accion(Accion.GIRAR_CANON_DER, (360*Math.random() - 180), 1));
  double avance = Math.min($batalla.getAnchoCampo(), $batalla.getAltoCampo())*Math.random();
  insert(new Accion(Accion.AVANZAR, avance, 1));
  System.out.println("regla 3");
end

// Quando há uma vítima escaneada, o robô atualiza seus dados no controle de estado da vítima e se move até ela
rule "victima detectada -> actualizar datos e ir hacia ella"
   when
      $datosVictima: Victima ($nombreVictima: nombre)
      $status : EstadoRobot()
      $victimaEscaneada: ScannedRobotEvent(name == $nombreVictima)
   then
      double anguloAbsoluto = Auxiliar.anguloAbsoluto($status.getHeading(), $victimaEscaneada.getBearing());
      $datosVictima.setX(Auxiliar.calcularX($status.getX(), anguloAbsoluto, $victimaEscaneada.getDistance()));                                            
      $datosVictima.setY(Auxiliar.calcularX($status.getY(), anguloAbsoluto, $victimaEscaneada.getDistance()));
      $datosVictima.setDistancia($victimaEscaneada.getDistance());
      
      insert(new Accion(Accion.GIRAR_TANQUE_DER, $victimaEscaneada.getBearing(), 1));
      double anguloRelativoCanon = Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading()); // Descontar el desplazam. actual del canon 
      insert(new Accion(Accion.GIRAR_CANON_DER, ($victimaEscaneada.getBearing() - anguloRelativoCanon), 1));
      double anguloRelativoRadar =  Auxiliar.anguloRelativo($status.getHeading(), $status.getRadarHeading()); // Descontar el desplazam. actual del radar  
      insert(new Accion(Accion.GIRAR_RADAR_DER, ($victimaEscaneada.getBearing() - anguloRelativoRadar), 1));
      insert(new Accion(Accion.AVANZAR, ($victimaEscaneada.getDistance()-100), 1));
end

// Quando uma vítima é detectada e está à uma distância mínima, o agente dispara tiros com o máximo de energia possível
// Essa regra substituirá a regra anterior
rule "victima en punto de mira -> disparar"
   when
      $status : EstadoRobot()
      Victima ($nombreVictima: nombre)
      // Victima detectada y cañon apunta en su angulo (con un margen de 2 grados)
      ScannedRobotEvent(name == $nombreVictima, $anguloRelativoVictima: bearing)                       
      eval (Math.abs($anguloRelativoVictima - Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading())) <= 2)   
   then
      insert(new Accion(Accion.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 1));
      System.out.println("Victima "+$nombreVictima+" a tiro => disparar");
end

// Tomar uma vítima e ir até ela
rule "sin victima -> tomar la primera que aparezca"
when
	not (exists Victima())
	$victimaEscaneada: ScannedRobotEvent()
	$status: EstadoRobot()
then
    Victima victima = new Victima();
      double anguloAbsoluto = Auxiliar.anguloAbsoluto($status.getHeading(), $victimaEscaneada.getBearing());
      victima.setNombre($victimaEscaneada.getName());
      victima.setX(Auxiliar.calcularX($status.getX(), anguloAbsoluto, $victimaEscaneada.getDistance()));                                            
      victima.setY(Auxiliar.calcularX($status.getY(), anguloAbsoluto, $victimaEscaneada.getDistance()));
      victima.setDistancia($victimaEscaneada.getDistance());
      insert(victima);
      
      insert(new Accion(Accion.GIRAR_TANQUE_DER, $victimaEscaneada.getBearing(), 1));
      double anguloRelativoCanon = Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading()); // Descontar el desplazam. actual del canon 
      insert(new Accion(Accion.GIRAR_CANON_DER, ($victimaEscaneada.getBearing() - anguloRelativoCanon), 1));
      double anguloRelativoRadar =  Auxiliar.anguloRelativo($status.getHeading(), $status.getRadarHeading()); // Descontar el desplazam. actual del radar  
      insert(new Accion(Accion.GIRAR_RADAR_DER, ($victimaEscaneada.getBearing() - anguloRelativoRadar), 1));
      insert(new Accion(Accion.AVANZAR, ($victimaEscaneada.getDistance()-100), 1));    
      System.out.println("regla 6"); 
end

// Quando uma vítima é eliminada, essa regra à tira do estado de vítima
rule "muerte de la victima"
when
   $victima: Victima ($nombreVictima: nombre)
   RobotDeathEvent( name == $nombreVictima )
then 
   retract($victima);
   System.out.println("Uno menos");
end

// Regra responsável por retirar o agente da parede, ela tem uma prioridade maior para que o agente não possa ser travado por outros agentes
rule "choque con muro"
when
   HitWallEvent($anguloRelativo: bearing)
then
   insert(new Accion(Accion.GIRAR_TANQUE_DER, (- $anguloRelativo), 5));
   insert(new Accion(Accion.AVANZAR, 100, 5));
end


// Ao se chocar com uma vítima retroceder
rule "choque con victima"
when
   HitRobotEvent($nombre: name, $anguloRelativo: bearing)
   Victima(nombre == $nombre)
then
   insert(new Accion(Accion.RETROCEDER, 100, 5));
end

// Ao se chocar com outra vítima, continuaremos avançando de modo que a outra vítima retroceda e estanque numa parede
rule "choque con otro robot"
when
   HitRobotEvent($nombre: name, $anguloRelativo: bearing)
   (or (not (exists Victima()))
       (Victima(nombre != $nombre)))
then
   insert(new Accion(Accion.GIRAR_TANQUE_DER, (- $anguloRelativo*1.50), 5));
   insert(new Accion(Accion.AVANZAR, 100, 5));
end
